{
  "_args": [
    [
      {
        "raw": "remarkable@^1.6.2",
        "scope": null,
        "escapedName": "remarkable",
        "name": "remarkable",
        "rawSpec": "^1.6.2",
        "spec": ">=1.6.2 <2.0.0",
        "type": "range"
      },
      "/home/travis/build/Modernizr/Modernizr"
    ]
  ],
  "_from": "remarkable@>=1.6.2 <2.0.0",
  "_id": "remarkable@1.7.1",
  "_inCache": true,
  "_location": "/remarkable",
  "_nodeVersion": "6.0.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/remarkable-1.7.1.tgz_1475517695993_0.8667815863154829"
  },
  "_npmUser": {
    "name": "spicyj",
    "email": "ben@benalpert.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "remarkable@^1.6.2",
    "scope": null,
    "escapedName": "remarkable",
    "name": "remarkable",
    "rawSpec": "^1.6.2",
    "spec": ">=1.6.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/remarkable/-/remarkable-1.7.1.tgz",
  "_shasum": "aaca4972100b66a642a63a1021ca4bac1be3bff6",
  "_shrinkwrap": null,
  "_spec": "remarkable@^1.6.2",
  "_where": "/home/travis/build/Modernizr/Modernizr",
  "bin": {
    "remarkable": "./bin/remarkable.js"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/remarkable/issues"
  },
  "contributors": [
    {
      "url": "https://github.com/dohliam"
    },
    {
      "url": "https://github.com/loveencounterflow"
    },
    {
      "url": "https://github.com/vyp"
    },
    {
      "name": "Adam Misiorny",
      "email": "adam.misiorny@gmail.com",
      "url": "http://bitnoi.se"
    },
    {
      "name": "Akuma",
      "email": "ihuangwj@gmail.com",
      "url": "https://github.com/akuma"
    },
    {
      "name": "Alex Kocharin",
      "email": "alex@kocharin.ru",
      "url": "https://github.com/rlidwka"
    },
    {
      "name": "Amila Welihinda",
      "email": "amilajack@gmail.com",
      "url": "http://amilawelihinda.com"
    },
    {
      "name": "Brenard Cubacub",
      "url": "bren.me"
    },
    {
      "name": "Denis Sokolov",
      "email": "denis@sokolov.cc",
      "url": "http://sokolov.cc"
    },
    {
      "name": "Eugene Sharygin",
      "url": "https://github.com/eush77"
    },
    {
      "name": "Harry Llewelyn",
      "email": "advocation@gmail.com",
      "url": "http://mynameisharry.com"
    },
    {
      "name": "Joey Baker",
      "email": "joey@byjoeybaker.com",
      "url": "https://byjoeybaker.com"
    },
    {
      "name": "Jon Schlinkert",
      "email": "jon.schlinkert@sellside.com",
      "url": "http://twitter.com/jonschlinkert"
    },
    {
      "name": "Julian Lam",
      "email": "julian@nodebb.org",
      "url": "https://www.nodebb.org"
    },
    {
      "name": "Lucas Parry",
      "url": "https://github.com/lparry"
    },
    {
      "name": "Luke Horvat",
      "email": "lukehorvat@gmail.com",
      "url": "http://lukehorvat.com"
    },
    {
      "name": "Mariusz Nowak",
      "email": "medyk@medikoo.com",
      "url": "http://www.medikoo.com"
    },
    {
      "name": "Mathias Bynens",
      "url": "https://mathiasbynens.be"
    },
    {
      "name": "Mathieu Lemoine",
      "url": "https://github.com/lemoinem"
    },
    {
      "name": "Matthew Mueller",
      "email": "mattmuelle@gmail.com",
      "url": "https://standupjack.com"
    },
    {
      "name": "Nik Nyby",
      "url": "http://nikolas.us.to"
    },
    {
      "name": "Per Kristian Næss-Fladset",
      "url": "https://github.com/pkfladset"
    },
    {
      "name": "Peter deHaan",
      "url": "http://about.me/peterdehaan"
    },
    {
      "name": "Rome Li",
      "url": "https://github.com/akaroml"
    },
    {
      "name": "Takezoe,Tomoaki",
      "email": "sumito3478@gmail.com",
      "url": "@sumito3478"
    },
    {
      "name": "Tom Byrer",
      "url": "https://github.com/tomByrer"
    },
    {
      "name": "Tom MacWright",
      "email": "tom@macwright.org",
      "url": "http://macwright.org"
    },
    {
      "name": "Una Ma",
      "email": "maruilian11@cdnjs.com.tw",
      "url": "https://github.com/maruilian11"
    },
    {
      "name": "Vitaly Puzrin",
      "email": "vitaly@rcdesign.ru",
      "url": "http://gravatar.com/puzrin"
    }
  ],
  "dependencies": {
    "argparse": "~0.1.15",
    "autolinker": "~0.15.0"
  },
  "description": "Markdown parser, done right. 100% Commonmark support, extensions, syntax plugins, high speed - all in one.",
  "devDependencies": {
    "ansi": "^0.3.0",
    "benchmark": "^1.0.0",
    "commonmark": "0.12.0",
    "gulp-format-md": "^0.1.10",
    "highlight.js": "^9.7.0",
    "marked": "0.3.2",
    "mocha": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "aaca4972100b66a642a63a1021ca4bac1be3bff6",
    "tarball": "https://registry.npmjs.org/remarkable/-/remarkable-1.7.1.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "files": [
    "bin",
    "dist",
    "index.js",
    "lib"
  ],
  "homepage": "https://github.com/jonschlinkert/remarkable",
  "keywords": [
    "commonmark",
    "markdown",
    "md",
    "parse",
    "parser",
    "process",
    "remarkable",
    "render",
    "renderer",
    "text"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "doowb",
      "email": "brian.woodward@sellside.com"
    },
    {
      "name": "jonschlinkert",
      "email": "github@sellside.com"
    }
  ],
  "name": "remarkable",
  "optionalDependencies": {},
  "readme": "# remarkable\n\n[![Build Status](https://travis-ci.org/jonschlinkert/remarkable.svg?branch=master)](https://travis-ci.org/jonschlinkert/remarkable)\n[![NPM version](https://img.shields.io/npm/v/remarkable.svg)](https://www.npmjs.org/package/remarkable)\n[![Coverage Status](https://img.shields.io/coveralls/jonschlinkert/remarkable.svg)](https://coveralls.io/r/jonschlinkert/remarkable?branch=dev)\n\n> Markdown parser done right. Fast and easy to extend.\n\n__[Live demo](http://jonschlinkert.github.io/remarkable/demo/)__\n\n- Supports the [CommonMark](http://commonmark.org/) spec +\n  [syntax extensions](#syntax-extensions) + sugar (URL autolinking, typographer).\n- Configurable syntax! You can add new rules and even replace existing ones.\n- [High speed](#benchmark)!\n- [Community plugins](https://www.npmjs.org/browse/keyword/remarkable) on npm.\n\n\n## Install\n\n**node.js:**\n\n```bash\nnpm install remarkable --save\n```\n\n**bower:**\n\n```bash\nbower install remarkable --save\n```\n\n**browser (CDN):**\n\n- [jsDeliver CDN](http://www.jsdelivr.com/#!remarkable \"jsDelivr CDN\")\n- [cdnjs](https://cdnjs.com/libraries/remarkable \"cdnjs\")\n\n\n## Usage\n\n```js\nvar Remarkable = require('remarkable');\nvar md = new Remarkable();\n\nconsole.log(md.render('# Remarkable rulezz!'));\n// => <h1>Remarkable rulezz!</h1>\n```\n\nIf installed globally with `npm`:\n\n```sh\ncat myfile.md | remarkable\nremarkable --file myfile.md\n\n# get options\nremarkable -h\n```\n\n## Documentation\n\nSee the [docs](docs/) directory for documentation on the following topics:\n\n- [parser](docs/parser.md)\n- [parsing_block](docs/parsing_block.md)\n- [parsing_core](docs/parsing_core.md)\n- [parsing_inline](docs/parsing_inline.md)\n- [plugins](docs/plugins.md)\n- [renderer](docs/renderer.md)\n\n### Options\n\nBy default, remarkable is configured to be similar to GFM, but with HTML disabled.\nThis is easy to change if you prefer different settings.\n\nThere are two ways to define options.\n\n#### constructor\n\nDefine options in the constructor:\n\n```js\n// Actual default values\nvar md = new Remarkable({\n  html:         false,        // Enable HTML tags in source\n  xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n  breaks:       false,        // Convert '\\n' in paragraphs into <br>\n  langPrefix:   'language-',  // CSS language prefix for fenced blocks\n  linkify:      false,        // Autoconvert URL-like text to links\n\n  // Enable some language-neutral replacement + quotes beautification\n  typographer:  false,\n\n  // Double + single quotes replacement pairs, when typographer enabled,\n  // and smartquotes on. Set doubles to '«»' for Russian, '„“' for German.\n  quotes: '“”‘’',\n\n  // Highlighter function. Should return escaped HTML,\n  // or '' if the source string is not changed\n  highlight: function (/*str, lang*/) { return ''; }\n});\n\nconsole.log(md.render('# Remarkable rulezz!'));\n// => <h1>Remarkable rulezz!</h1>\n```\n\n#### .set\n\nOr define options via the `.set()` method:\n\n```js\nvar Remarkable = require('remarkable');\nvar md = new Remarkable();\n\nmd.set({\n  html: true,\n  breaks: true\n});\n```\n\n**Note:** To achieve the best possible performance, don't modify a `Remarkable`\ninstance on the fly. If you need multiple configurations, create\nmultiple instances and initialize each with a configuration that is ideal for\nthat instance.\n\n\n### Presets\n\nRemarkable offers some \"presets\" as a convenience to quickly enable/disable\nactive syntax rules and options for common use cases.\n\n#### commonmark\n\nEnable strict [CommonMark](http://commonmark.org/) mode with the `commonmark` preset:\n\n```js\nvar Remarkable = require('remarkable');\nvar md = new Remarkable('commonmark');\n```\n\n#### full\n\nEnable all available rules (but still with default options, if not set):\n\n```js\nvar Remarkable = require('remarkable');\nvar md = new Remarkable('full');\n\n// Or with options:\nvar md = new Remarkable('full', {\n  html: true,\n  linkify: true,\n  typographer: true\n});\n```\n\n\n### Syntax highlighting\n\nApply syntax highlighting to fenced code blocks with the `highlight` option:\n\n```js\nvar Remarkable = require('remarkable');\nvar hljs       = require('highlight.js') // https://highlightjs.org/\n\n// Actual default values\nvar md = new Remarkable({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return hljs.highlight(lang, str).value;\n      } catch (err) {}\n    }\n\n    try {\n      return hljs.highlightAuto(str).value;\n    } catch (err) {}\n\n    return ''; // use external default escaping\n  }\n});\n```\n\n\n### Syntax extensions\n\nEnabled by default:\n\n- [Footnotes](http://johnmacfarlane.net/pandoc/README.html#footnotes)\n- [Tables](https://help.github.com/articles/github-flavored-markdown/#tables) (GFM)\n- [\\<del>](https://help.github.com/articles/github-flavored-markdown/#strikethrough)\n  (GFM strikethrough) - `~~deleted text~~`\n\nDisabled by default:\n\n- [\\<sup>](http://johnmacfarlane.net/pandoc/README.html#superscripts-and-subscripts) - `19^th^`\n- [\\<sub>](http://johnmacfarlane.net/pandoc/README.html#superscripts-and-subscripts) - `H~2~0`\n- [abbreviations](https://michelf.ca/projects/php-markdown/extra/#abbr)\n- __\\<ins>__ - `++inserted text++` (experimental)\n- __\\<mark>__ - `==marked text==` (experimental)\n\n**HEADS UP!**: Experimental extensions can be changed later for something like [Critic Markup](http://criticmarkup.com/), but you will still be able to use old-style rules via external plugins if you prefer.\n\n\n### Manage rules\n\n```js\nvar md = new Remarkable();\nmd.inline.ruler.enable([ 'ins', 'mark' ]);\nmd.block.ruler.disable([ 'table', 'footnote' ]);\n\n// Enable everything\nmd = new Remarkable('full', {\n  html: true,\n  linkify: true,\n  typographer: true,\n});\n\n//\n// Manually enable rules, disabled by default:\n//\nvar md = new Remarkable();\nmd.core.ruler.enable([\n  'abbr'\n]);\nmd.block.ruler.enable([\n  'footnote',\n  'deflist'\n]);\nmd.inline.ruler.enable([\n  'footnote_inline',\n  'ins',\n  'mark',\n  'sub',\n  'sup'\n]);\n```\n\n\n### Typographer\n\nAlthough full-weight typographical replacements are language specific, `remarkable`\nprovides coverage for the most common and universal use cases:\n\n```js\nvar Remarkable = require('remarkable');\nvar md = new Remarkable({\n  typographer: true,\n  quotes: '“”‘’'\n});\n\n// Disable rules at all:\nmd.core.ruler.disable([ 'replacements', 'smartquotes' ]);\n\n// Actual default replacements:\n//\n// '' → ‘’\n// \"\" → “”. Set '«»' for Russian, '„“' for German, empty to disable\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// (p) (P) -> §\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n```\n\nOf course, you can also add your own rules or replace the defaults with something\nmore advanced or specific to your language.\n\n\n### Plugins\n\nEasily load plugins with the `.use()` method:\n\n```js\nvar md = new Remarkable();\n\nmd.use(plugin1)\n  .use(plugin2, opts)\n  .use(plugin3);\n```\n\nPlease refer to the [plugin documentation](doc/plugins.md) to create your own\nplugins.\n\n## References / Thanks\n\nBig thanks to [John MacFarlane](https://github.com/jgm) for his work on the\nCommonMark spec and reference implementations. His work saved us a lot of time\nduring this project's development.\n\n**Related Links:**\n\n1. https://github.com/jgm/CommonMark - reference CommonMark implementations in C & JS,\n   also contains latest spec & online demo.\n2. http://talk.commonmark.org - CommonMark forum, good place to collaborate\n   developers' efforts.\n\n\n## Development / Modification\n\n[Parser](doc/parser.md) consists of several responsibility chains filled with\nrules. You can reconfigure any of them as you wish. [Renderer](doc/renderer.md) also\ncan be modified and extended. See source code to understand details. Pay\nattention to these properties:\n\n```js\nRemarkable.core\nRemarkable.core.ruler\nRemarkable.block\nRemarkable.block.ruler\nRemarkable.inline\nRemarkable.inline.ruler\nRemarkable.renderer\nRemarkable.renderer.rules\n```\n\n## Benchmark\n\nHere is result of CommonMark spec parse at Core i5 2.4 GHz (i5-4258U):\n\n```bash\n$ benchmark/benchmark.js spec\nSelected samples: (1 of 27)\n > spec\n\nSample: spec.txt (110610 bytes)\n > commonmark-reference x 40.42 ops/sec ±4.07% (51 runs sampled)\n > current x 74.99 ops/sec ±4.69% (67 runs sampled)\n > current-commonmark x 93.76 ops/sec ±1.23% (79 runs sampled)\n > marked-0.3.2 x 22.92 ops/sec ±0.79% (41 runs sampled)\n```\n\nAs you can see, `remarkable` doesn't pay with speed for it's flexibility. Because\nit's written in monomorphic style and uses JIT inline caches effectively.\n\n\n## Authors\n\n- Jon Schlinkert [github/jonschlinkert](https://github.com/jonschlinkert)\n- Alex Kocharin [github/rlidwka](https://github.com/rlidwka)\n- Vitaly Puzrin [github/puzrin](https://github.com/puzrin)\n\n\n## License\n\n[MIT](https://github.com/jonschlinkert/remarkable/blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jonschlinkert/remarkable.git"
  },
  "scripts": {
    "test": "make test"
  },
  "verb": {
    "toc": false,
    "layout": "nil",
    "tasks": [
      "readme"
    ],
    "plugins": [
      "gulp-format-md"
    ],
    "lint": {
      "reflinks": true
    }
  },
  "version": "1.7.1"
}
